# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from cgi import print_form

from PyQt5 import QtCore, QtGui, QtWidgets,QtWebEngineWidgets
from PyQt5.QtWidgets import QFileDialog ,QApplication, QFileSystemModel, QTreeView, QWidget, QVBoxLayout,QLineEdit,QInputDialog
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import  QSortFilterProxyModel,QDir
import pandas as pd
import os

from requests import ReadTimeout
from pandasModel import pandasModel 
from tweet_Manager import TweepyManager as twM
from data import  dataManager
from crawler1 import Crawler
from search_database import search_database
from MultiThread import TweetThread_Search, Web_scan_word,WebThread_Search
import glob

class Ui_mainWindow(object):
    def __init__(self):
        self.twM = twM()
        self.dtM = dataManager()
        self.wcr = Crawler()
        self.sDB = search_database()

        
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(937, 787)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 931, 751))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.progressBar = QtWidgets.QProgressBar(self.tab)
        self.progressBar.setEnabled(True)
        self.progressBar.setGeometry(QtCore.QRect(10, 50, 221, 16))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(63, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(63, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(63, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.progressBar.setPalette(palette)
        self.progressBar.setMouseTracking(False)
        self.progressBar.setTabletTracking(False)
        self.progressBar.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.progressBar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.progressBar.setAutoFillBackground(False)
        self.progressBar.setStyleSheet("background-color:#ffdb4a")
        self.progressBar.setLocale(QtCore.QLocale(QtCore.QLocale.Afar, QtCore.QLocale.Ethiopia))
        self.progressBar.setProperty("value", 100)
        self.progressBar.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.progressBar.setTextVisible(True)
        self.progressBar.setOrientation(QtCore.Qt.Horizontal)
        self.progressBar.setInvertedAppearance(False)
        self.progressBar.setObjectName("progressBar")
        self.textEdit = QtWidgets.QTextEdit(self.tab)
        self.textEdit.setGeometry(QtCore.QRect(10, 20, 221, 31))
        self.textEdit.setAutoFillBackground(False)
        self.textEdit.setObjectName("textEdit")
        self.label_2 = QtWidgets.QLabel(self.tab)
        self.label_2.setGeometry(QtCore.QRect(700, 60, 41, 20))
        self.label_2.setObjectName("label_2")
        self.Search = QtWidgets.QPushButton(self.tab)
        self.Search.setGeometry(QtCore.QRect(240, 30, 75, 23))
        self.Search.setObjectName("Search")
        self.Search.clicked.connect(lambda :self.search_tweet())
        
        self.tableView = QtWidgets.QTableView(self.tab)
        self.tableView.setGeometry(QtCore.QRect(2, 150, 691, 571))
        self.tableView.setObjectName("tableView")
        self.tableView.setSortingEnabled(True)
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(10, 0, 211, 16))
        self.label.setObjectName("label")
        self.tableView_2 = QtWidgets.QTableView(self.tab)
        self.tableView_2.setGeometry(QtCore.QRect(750, 0, 161, 141))
        self.tableView_2.setObjectName("tableView_2")
        self.tableView_2.setSortingEnabled(True)
        
        self.dateEdit = QtWidgets.QDateEdit(self.tab)
        self.dateEdit.setGeometry(QtCore.QRect(10, 70, 221, 22))
        self.dateEdit.setLocale(QtCore.QLocale(QtCore.QLocale.Afar, QtCore.QLocale.Ethiopia))
        self.dateEdit.setTimeSpec(QtCore.Qt.LocalTime)
        self.dateEdit.setDate(QtCore.QDate(2022, 5, 4))
        self.dateEdit.setObjectName("dateEdit")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tableView_3 = QtWidgets.QTableView(self.tab_2)
        self.tableView_3.setGeometry(QtCore.QRect(10, 150, 681, 571))
        self.tableView_3.setObjectName("tableView_3")
        self.tableView_3.setSortingEnabled(True)
        
        self.tableView_8 = QtWidgets.QTableView(self.tab_2)
        self.tableView_8.setGeometry(QtCore.QRect(700, 170, 221, 421))
        self.tableView_8.setObjectName("tableView_7")        
 
        self.textEdit_3 = QtWidgets.QTextEdit(self.tab_2)
        self.textEdit_3.setGeometry(QtCore.QRect(10, 40, 281, 40))
        self.textEdit_3.setAutoFillBackground(False)
        self.textEdit_3.setObjectName("textEdit_3")
        self.label_3 = QtWidgets.QLabel(self.tab_2)
        self.label_3.setGeometry(QtCore.QRect(10, 20, 211, 16))
        self.label_3.setObjectName("label_3")
        self.tableView_7 = QtWidgets.QTableView(self.tab)
        self.tableView_7.setGeometry(QtCore.QRect(700, 170, 221, 421))
        self.tableView_7.setObjectName("tableView_7")
        self.Search_2 = QtWidgets.QPushButton(self.tab_2)
        self.Search_2.setGeometry(QtCore.QRect(300, 50, 75, 25))
        self.Search_2.setObjectName("Search_2")
        self.progressBar_2 = QtWidgets.QProgressBar(self.tab_2)
        self.Search_2.clicked.connect(lambda :self.search_web())
        self.progressBar_2.setEnabled(True)
        self.progressBar_2.setGeometry(QtCore.QRect(10, 80, 221, 16))
        
        self.Search_2_2 = QtWidgets.QPushButton(self.tab_2)
        self.Search_2_2.setGeometry(QtCore.QRect(380, 50, 75, 25))
        self.Search_2_2.setObjectName("Search_22")
        self.Search_2_2.clicked.connect(lambda :self.createTable_web_key())
                
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(63, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(63, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(63, 255, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 127, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 219, 74))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.progressBar_2.setPalette(palette)
        self.progressBar_2.setMouseTracking(False)
        self.progressBar_2.setTabletTracking(False)
        self.progressBar_2.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.progressBar_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.progressBar_2.setAutoFillBackground(False)
        self.progressBar_2.setStyleSheet("background-color:#ffdb4a")
        self.progressBar_2.setLocale(QtCore.QLocale(QtCore.QLocale.Afar, QtCore.QLocale.Ethiopia))
        self.progressBar_2.setProperty("value", 100)
        self.progressBar_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.progressBar_2.setTextVisible(True)
        self.progressBar_2.setOrientation(QtCore.Qt.Horizontal)
        self.progressBar_2.setInvertedAppearance(False)
        self.progressBar_2.setObjectName("progressBar_2")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.label_5 = QtWidgets.QLabel(self.tab_3)
        self.label_5.setGeometry(QtCore.QRect(10, 10, 211, 16))
        self.label_5.setObjectName("label_5")
        self.textEdit_4 = QtWidgets.QTextEdit(self.tab_3)
        self.textEdit_4.setGeometry(QtCore.QRect(10, 60, 221, 31))
        self.textEdit_4.setAutoFillBackground(False)
        self.textEdit_4.setObjectName("textEdit_4")
        self.label_6 = QtWidgets.QLabel(self.tab_3)
        self.label_6.setGeometry(QtCore.QRect(10, 30, 211, 16))
        self.label_6.setObjectName("label_6")
        self.checkBox = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox.setGeometry(QtCore.QRect(240, 60, 70, 17))
        self.checkBox.setObjectName("checkBox")
        self.dateEdit_2 = QtWidgets.QDateEdit(self.tab_3)
        self.dateEdit_2.setGeometry(QtCore.QRect(270, 80, 101, 22))
        self.dateEdit_2.setLocale(QtCore.QLocale(QtCore.QLocale.Afar, QtCore.QLocale.Ethiopia))
        self.dateEdit_2.setCurrentSection(QtWidgets.QDateTimeEdit.YearSection)
        self.dateEdit_2.setCalendarPopup(True)
        self.dateEdit_2.setTimeSpec(QtCore.Qt.LocalTime)
        self.dateEdit_2.setDate(QtCore.QDate(2022, 5, 4))
        self.dateEdit_2.setObjectName("dateEdit_2")
        self.label_7 = QtWidgets.QLabel(self.tab_3)
        self.label_7.setGeometry(QtCore.QRect(240, 80, 61, 16))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.tab_3)
        self.label_8.setGeometry(QtCore.QRect(240, 110, 21, 16))
        self.label_8.setObjectName("label_8")
        self.dateEdit_3 = QtWidgets.QDateEdit(self.tab_3)
        self.dateEdit_3.setGeometry(QtCore.QRect(270, 110, 100, 22))
        self.dateEdit_3.setLocale(QtCore.QLocale(QtCore.QLocale.Afar, QtCore.QLocale.Ethiopia))
        self.dateEdit_3.setCurrentSection(QtWidgets.QDateTimeEdit.YearSection)
        self.dateEdit_3.setCalendarPopup(True)
        self.dateEdit_3.setTimeSpec(QtCore.Qt.LocalTime)
        self.dateEdit_3.setDate(QtCore.QDate(2022, 5, 4))
        self.dateEdit_3.setObjectName("dateEdit_3")
        self.Search_3 = QtWidgets.QPushButton(self.tab_3)
        self.Search_3.setGeometry(QtCore.QRect(320, 50, 75, 22))
        self.Search_3.setObjectName("Search_3")
        self.Search_3.clicked.connect(lambda :self.createTable_search_nodate(self.textEdit_4.toPlainText()))
        self.Search_4 = QtWidgets.QPushButton(self.tab_3)
        self.Search_4.setGeometry(QtCore.QRect(770,690, 75, 22))
        self.Search_4.setObjectName("Search_4")        
        self.Search_4.clicked.connect(lambda :self.save_data_as_csv())
        self.Search_5 = QtWidgets.QPushButton(self.tab_3)
        self.Search_5.setGeometry(QtCore.QRect(770,660, 75, 22))
        self.Search_5.setObjectName("Search_5")        
        self.Search_5.clicked.connect(lambda :self.TW_save_data_as_csv_use())
        self.tableView_4 = QtWidgets.QTableView(self.tab_3)
        self.tableView_4.setGeometry(QtCore.QRect(10, 170, 681, 551))
        self.tableView_4.setObjectName("tableView_4")
        self.tableView_4.setSortingEnabled(True)
        self.tableView_5 = QtWidgets.QTreeView(self.tab_3)
        self.tableView_5.setGeometry(QtCore.QRect(430, 0, 491, 141))
        self.tableView_5.setObjectName("treeView")
        self.checkBox_2 = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_2.setGeometry(QtCore.QRect(240, 40, 81, 17))
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_3.setGeometry(QtCore.QRect(240, 20, 101, 21))
        self.checkBox_3.setObjectName("checkBox_3")
        self.tableView_6 = QtWidgets.QTableView(self.tab_3)
        self.tableView_6.setGeometry(QtCore.QRect(700, 170, 221, 261))
        self.tableView_6.setObjectName("tableView_6")
        self.label_9 = QtWidgets.QLabel(self.tab)
        self.label_9.setGeometry(QtCore.QRect(10, 130, 681, 16))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.tab_3)
        self.label_10.setGeometry(QtCore.QRect(20, 150, 661, 16))
        self.label_10.setObjectName("label_9")
        self.label_11 = QtWidgets.QLabel(self.tab_3)
        self.label_11.setGeometry(QtCore.QRect(700, 150, 211, 16))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.tab)
        self.label_12.setGeometry(QtCore.QRect(700, 150, 211, 16))
        self.label_12.setObjectName("label_10")
        self.label_13 = QtWidgets.QLabel(self.tab_2)
        self.label_13.setGeometry(QtCore.QRect(10, 130, 671, 16))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.tab_2)
        self.label_14.setGeometry(QtCore.QRect(700, 150, 211, 16))
        self.label_14.setObjectName("label_14")
        model = QFileSystemModel()
        model.setRootPath(QDir.currentPath())
  
        self.tableView_5.setModel(model)
        self.tableView_5.setRootIndex(model.index(QDir.currentPath()))

        self.tabWidget.addTab(self.tab_3, "")

        mainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 701, 21))
        self.menubar.setObjectName("menubar")
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)
        self.createTable_Trend(self.tableView_2)
        self.retranslateUi(mainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "SianClawler 1.0"))
        self.label_2.setText(_translate("mainWindow", "Trending"))
        self.Search.setText(_translate("mainWindow", "Search"))
        self.label.setText(_translate("mainWindow", "Insert keyword"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("mainWindow", "Tweepy"))
        self.label_3.setText(_translate("mainWindow", "Insert keyword"))
        self.Search_2.setText(_translate("mainWindow", "Crawler"))
        self.Search_2_2.setText(_translate("mainWindow", "Search"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("mainWindow", "Web_Crawler"))
        self.dateEdit.setDisplayFormat(_translate("mainWindow", "yyyy-MM-dd"))
        self.label_5.setText(_translate("mainWindow", "DATABASE SEARCH"))
        self.label_6.setText(_translate("mainWindow", "Insert keyword"))
        self.checkBox.setText(_translate("mainWindow", "USE DATE"))
        self.dateEdit_2.setDisplayFormat(_translate("mainWindow", "yyyy-MM-dd"))
        self.label_7.setText(_translate("mainWindow", "From"))
        self.label_8.setText(_translate("mainWindow", "To"))
        self.dateEdit_3.setDisplayFormat(_translate("mainWindow", "yyyy-MM-dd"))
        self.Search_3.setText(_translate("mainWindow", "Search"))
        self.Search_4.setText(_translate("mainWindow", "Export All"))
        self.Search_5.setText(_translate("mainWindow", "Export Use"))
        self.checkBox_2.setText(_translate("mainWindow", "Web Search"))
        self.checkBox_3.setText(_translate("mainWindow", "Web(keyword)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("mainWindow", "Database_S"))
        self.label_9.setText(_translate("mainWindow", "Sentiment = Positive,Negative,Neutral"))
        self.label_10.setText(_translate("mainWindow", "Sentiment = Positive,Negative,Neutral"))
        self.label_11.setText(_translate("mainWindow", "Relate Hashtag(for tweet)"))
        self.label_12.setText(_translate("mainWindow", "Relate Hashtag"))
        self.label_13.setText(_translate("mainWindow", "Sentiment = Positive,Negative,Neutral"))
        self.label_14.setText(_translate("mainWindow", "Relate Word"))
    def search_tweet(self):
        self.progressBar.setProperty("value", 0)
        # self.twM.search_for_hashtags(self.textEdit.toPlainText(),self.dateEdit.text())

        self.tw_thread_search = TweetThread_Search(self.textEdit.toPlainText(),self.dateEdit.text())
        self.tw_thread_search.start()

        self.tw_thread_search.finished.connect(lambda:self.createTable())

    def createTable(self):

        fname = self.textEdit.toPlainText()
        datetime = self.dateEdit.text()
        filename=f"./data_tweepy/{fname}/{fname}_{datetime}.csv"
        # table_name = self.twM.search_for_hashtags(self.textEdit.toPlainText())

        model = pandasModel(self.dtM.readData(filename))
        proxyModel = QSortFilterProxyModel()
        proxyModel.setSourceModel(model)
        table_name = self.tableView
        table_name.setModel(proxyModel)
        self.progressBar.setProperty("value", 100)
        self.TweetSentimentLabel(filename)
        self.TWRelateHashtag(filename)

    def TweetSentimentLabel(self,filename):        
        fileObjece = pd.read_csv(filename,encoding = 'utf-8',index_col=0).dropna()


        positive_raw = int(fileObjece['Sentiment'].value_counts().get('positive'))
        negative_raw = int(fileObjece['Sentiment'].value_counts().get('negative'))
        neutral_raw = int(fileObjece['Sentiment'].value_counts().get('neutral'))

        maxcol = positive_raw+negative_raw+neutral_raw

        positive = float("{:.2f}".format(positive_raw/maxcol*100))        
        negative = float("{:.2f}".format(negative_raw/maxcol*100))
        neutral = float("{:.2f}".format(neutral_raw/maxcol*100))
        self.label_9.setText(f"Sentiment({maxcol} tweets) = Positive {positive} %({positive_raw}) , Negative {negative} %({negative_raw}) , Neutral {neutral} %({neutral_raw})")

    def Web_TweetSentimentLabel(self,filename):        
        
        positive_raw = filename['Sentiment'].value_counts().get('positive')
        negative_raw = filename['Sentiment'].value_counts().get('negative')
        
        if negative_raw == None:
            negative_raw = 0


        try:
            neutral_raw = filename['Sentiment'].value_counts().get('neutral')
            maxcol = positive_raw+negative_raw+neutral_raw
            positive = float("{:.2f}".format(positive_raw/maxcol*100))        
            negative = float("{:.2f}".format(negative_raw/maxcol*100))
            neutral = float("{:.2f}".format(neutral_raw/maxcol*100))
            self.label_10.setText(f"Sentiment({maxcol}) = Positive {positive} %({positive_raw}) , Negative {negative} %({negative_raw}) , Neutral {neutral} %({neutral_raw})")
            self.label_13.setText(f"Sentiment({maxcol}) = Positive {positive} %({positive_raw}) , Negative {negative} %({negative_raw}) , Neutral {neutral} %({neutral_raw})")
        except:
            
            maxcol = positive_raw+negative_raw
            positive = float("{:.2f}".format(positive_raw/maxcol*100))        
            negative = float("{:.2f}".format(negative_raw/maxcol*100))

            self.label_10.setText(f"Sentiment({maxcol}) = Positive {positive} %({positive_raw}) , Negative {negative} %({negative_raw})")
            self.label_13.setText(f"Sentiment({maxcol}) = Positive {positive} %({positive_raw}) , Negative {negative} %({negative_raw})")


    def DB_TweetSentimentLabel(self,filename):        
        
        positive_raw = filename['Sentiment'].value_counts().get('positive')
        negative_raw = filename['Sentiment'].value_counts().get('negative')
        neutral_raw = filename['Sentiment'].value_counts().get('neutral')
        maxcol = positive_raw+negative_raw+neutral_raw

        positive = float("{:.2f}".format(positive_raw/maxcol*100))        
        negative = float("{:.2f}".format(negative_raw/maxcol*100))
        neutral = float("{:.2f}".format(neutral_raw/maxcol*100))
        self.label_10.setText(f"Sentiment({maxcol} tweets) = Positive {positive} %({positive_raw}) , Negative {negative} %({negative_raw}) , Neutral {neutral} %({neutral_raw})")

    def createTable_Trend(self,table_name):    
        self.twM.trending()
        # table_name = self.twM.search_for_hashtags(self.textEdit.toPlainText())
        filename ='trending.csv'
        model = pandasModel(self.dtM.readData(filename))
        proxyModel = QSortFilterProxyModel()
        proxyModel.setSourceModel(model)
        table_name = self.tableView_2
        table_name.setModel(proxyModel)
    

    def search_web(self):
        self.progressBar_2.setProperty("value", 0)
        # self.twM.search_for_hashtags(self.textEdit.toPlainText(),self.dateEdit.text())

        self.wcr_thread_search = WebThread_Search()
        self.wcr_thread_search.start()

        self.wcr_thread_search.finished.connect(lambda:self.createTable_web_show(self.textEdit_3.toPlainText()))        

    def createTable_web_key(self):
        self.progressBar_2.setProperty("value", 0)
        
        self.wk_thread_search = Web_scan_word(self.textEdit_3.toPlainText())
        self.wk_thread_search.start()

        self.wk_thread_search.finished.connect(lambda:self.createTable_web_key_show(self.textEdit_3.toPlainText(),self.textEdit_3.toPlainText()))       
             
    def createTable_web_key_show(self,table_name,keyword):
        filename = keyword
        if self.textEdit_3.toPlainText() != "": 
            model_2 = pandasModel(self.dtM.readData2(f"./DataKeyword/{filename}.csv"))
            proxyModel_2 = QSortFilterProxyModel()
            proxyModel_2.setSourceModel(model_2)
            table_name = self.tableView_3
            table_name.setModel(proxyModel_2)        

            model_3 = pandasModel(self.dtM.readData(f"./DataRelate/{filename}.csv"))
            proxyModel_3 = QSortFilterProxyModel()
            proxyModel_3.setSourceModel(model_3)
            table_name = self.tableView_8
            table_name.setModel(proxyModel_3)     
                    
            filename = self.sDB.Web_search_with_key(keyword)
            
            self.Web_TweetSentimentLabel(filename)
            
            self.progressBar_2.setProperty("value", 100)
        
                            
    def createTable_web_show(self,table_name):
  
        list_all_files = []                            
        for i in range(19):
            list_web = ["assist-football","birminghammail","eftfootball","eurosport","football-kapook","football365","footballaddrict","footballhits98","footballmoment","goal","shotongoal","siamsport","skysports","sport-mthai","sportbible","sportsmole","standard","talksport","thairath"]
            all_files = glob.glob(f"DataCSV/{list_web[i]}/*.csv")
            for k in range(len(all_files)):
                list_all_files.append(all_files[k])
        list_df = pd.concat((pd.read_csv(f,encoding = 'utf-8',index_col=0) for f in list_all_files))   
        model_2 = pandasModel(list_df)
        proxyModel_2 = QSortFilterProxyModel()
        proxyModel_2.setSourceModel(model_2)
        table_name = self.tableView_3
        table_name.setModel(proxyModel_2)        
        self.progressBar_2.setProperty("value", 100)   

    def createTable_search_nodate(self,table_name):
        if self.checkBox_2.isChecked() == False:
            if self.checkBox.isChecked() == True: #With Date
                # try:
                filename = self.sDB.tweet_search_with_date(table_name,self.dateEdit_2.text(),self.dateEdit_3.text())
                model_2 = pandasModel(filename)
                proxyModel_2 = QSortFilterProxyModel()
                proxyModel_2.setSourceModel(model_2)
                table_name = self.tableView_4
                table_name.setModel(proxyModel_2)
                self.DB_TweetSentimentLabel(filename)
                self.TWDB_RelateHashtag(filename)
                return filename 
                # except:
                #     print("Keyword of Date Invalid!!")
                #     pass
      
            else:
                # try:
                filename = self.sDB.tweet_search_no_date(table_name)
                # filename = self.sDB.tweet_search_from_text()
                model_2 = pandasModel(filename)
                proxyModel_2 = QSortFilterProxyModel()
                proxyModel_2.setSourceModel(model_2)
                table_name = self.tableView_4
                table_name.setModel(proxyModel_2)
                self.DB_TweetSentimentLabel(filename)
                self.TWDB_RelateHashtag(filename) 
                print(type(filename))
                return filename 
                # except:
                #     print("Keyword Invalid!!")
                #     pass

        if self.checkBox_2.isChecked() == True:
            if self.checkBox_3.isChecked() == True: #Web Key search
                # try:
                filename = self.sDB.Web_search_with_key(table_name)
                model_2 = pandasModel(filename)
                proxyModel_2 = QSortFilterProxyModel()
                proxyModel_2.setSourceModel(model_2)
                table_name = self.tableView_4
                table_name.setModel(proxyModel_2)
                self.Web_TweetSentimentLabel(filename)
                return filename 
                # except:
                #     print("Keyword Invalid!!")
                #     pass   
            else:
                filename = self.sDB.Web_search_no_date(table_name)
                model_2 = pandasModel(filename)
                proxyModel_2 = QSortFilterProxyModel()
                proxyModel_2.setSourceModel(model_2)
                table_name = self.tableView_4
                table_name.setModel(proxyModel_2)
                self.Web_TweetSentimentLabel(filename)
                return filename        
        else:
            print("Keyword Invalid!!")
          
    def TWRelateHashtag(self,filename):
        # data = self.twM.RelateHashtag(filename)
        # model = pandasModel(self.dtM.readData(data))
        model = pandasModel(self.twM.RelateHashtag(filename))
        proxyModel = QSortFilterProxyModel()
        proxyModel.setSourceModel(model)
        table_name = self.tableView_7
        table_name.setModel(proxyModel)

    def TWDB_RelateHashtag(self,filename):
        # data = self.twM.RelateHashtag(filename)
        # model = pandasModel(self.dtM.readData(data))
        model = pandasModel(self.sDB.DBRelateHashtag(filename))
        proxyModel = QSortFilterProxyModel()
        proxyModel.setSourceModel(model)
        table_name = self.tableView_6
        table_name.setModel(proxyModel)





    def save_data_as_csv(self):
        
        try:    
            self.file = self.createTable_search_nodate(self.textEdit_4.toPlainText())
            file_filter = '"Excel or CSV(*.csv ,*.xls ,*.xlsx ,*.xlsm)'
            response = QtWidgets.QFileDialog.getSaveFileName(
                caption='Export file',
                filter=file_filter,
                initialFilter='"Excel or CSV(*.csv ,*.xls ,*.xlsx ,*.xlsm)'
            )
            
            if not self.file.empty:
                df = self.file
                if response[0] != '':
                    df.to_csv(response[0], index=False)
        except Exception:
            print("NO FILE TO EXPORT")


    def TW_save_data_as_csv_use(self):
        
        try:    
            self.file = self.createTable_search_nodate(self.textEdit_4.toPlainText())
            list_use = ['Hashtag','Username','Date','retweet','Key_word_count','Favorite','Sentiment']
            self.file = self.file[list_use]
            file_filter = '"Excel or CSV(*.csv ,*.xls ,*.xlsx ,*.xlsm)'
            response = QtWidgets.QFileDialog.getSaveFileName(
                caption='Export file',
                filter=file_filter,
                initialFilter='"Excel or CSV(*.csv ,*.xls ,*.xlsx ,*.xlsm)'
            )
            
            if not self.file.empty:
                df = self.file
                if response[0] != '':
                    df.to_csv(response[0], index=False)
        except Exception:
            print("NO FILE TO EXPORT")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())
